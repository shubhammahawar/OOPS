Abstraction :
Data Abstraction is the property by virtue of which only the essential details are displayed to the user. 
The trivial or non-essential units are not displayed to the user. Ex: A car is viewed as a car rather than its individual components.

It is used to achieve multiple inheritance.
It is used to achieve loose coupling.
It is used to achieve abstraction

1. Using Abstract Class  - gives 0-100% abstraction

abstract class Shape(){
  abstract void area();
  void displayShape(){
   System.out.println("Display Shape");
}

class Circle extends Shape {

public void area(){
System.out.println("Area of a Circle");

}

class Test {
public static void main (String args[]){

Circle obj = new Circle();
obj.area();
obj.displayShape();

}


2. Using Interface - gives 100% abstraction 

interface Shape{

final int a =10; // by default public static & final
void display(); // bydefault public & abstract

}

class Test implements Shape {

public void display (){
System.out.println("Display Shape");
}

public static void main (String args[]){

Test obj = new Test ();
obj.display();
}

System.out.println(a);
}








